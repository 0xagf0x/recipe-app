{"ast":null,"code":"var _jsxFileName = \"/Users/cbuckley/react/Recipe App/src/Recipe.js\";\n// import React, { useEffect, useState } from \"react\";\n// import { Typography, Link, CircularProgress, Button } from \"@material-ui/core\";\n// import { toFirstCharUppercase } from \"./constants\";\n// import axios from \"axios\";\n// import mockData from './mockData';\n// const Recipe = (props) => {\n//   const { match, history } = props;\n//   const { params } = match;\n//   const { recipeID } = params;\n//   const [recipe, setRecipe] = useState(mockData);\n//   useEffect(() => {\n//     axios\n//       .get(`./Mock`)\n//       .then(function (response) {\n//         const { data } = response;\n//         setRecipe(data);\n//       })\n//       .catch(function (error) {\n//         setRecipe(false);\n//       });\n//   }, [recipeID]);\n//   const generateRecipeJSX = (recipe) => {\n//     const { name, id, ingredients, weight, } = recipe;\n//     const fullImageUrl = `https://graphics8.nytimes.com/images/2009/09/11/dining/10mini600.1.jpg`;\n//     return (\n//       <>\n//         <Typography variant=\"h3\">\n//            {toFirstCharUppercase(name)}\n//         </Typography>\n//         <img style={{ width: \"300px\", height: \"300px\" }} src={fullImageUrl} alt={fullImageUrl} />\n//         <Typography>Ingredients: {ingredients} </Typography>\n//         <Typography>Directions: {weight} </Typography>\n//       </>\n//     );\n//   };\n//   return (\n//     <>\n//       {recipe === undefined && <CircularProgress />}\n//       {recipe !== undefined && recipe && generateRecipeJSX(recipe)}\n//       {recipe === false && <Typography> Recipe not found</Typography>}\n//       {recipe !== undefined && (\n//         <Button variant=\"contained\" onClick={() => history.push(\"/\")}>\n//           Back\n//         </Button>\n//       )}\n//     </>\n//   );\n// };\n// export default Recipe;\nimport React, { useEffect, useState } from \"react\";\nimport { Grid, Card, CardMedia, CardContent, Typography, CircularProgress, Toolbar, AppBar, TextField } from \"@material-ui/core\";\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\nimport { toFirstCharUppercase } from \"./constants\";\nimport axios from \"axios\";\nimport mockData from './mockData';\nconst useStyles = makeStyles(theme => ({\n  recipeContainer: {\n    paddingTop: \"20px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\"\n  },\n  cardMedia: {\n    margin: \"auto\"\n  },\n  cardHover: {\n    '&:hover': {\n      transition: 'all .25s ease-in-out',\n      transform: 'scale(1.05)'\n    }\n  },\n  cardContent: {\n    textAlign: \"center\",\n    backgroundColor: \"lightgrey\"\n  },\n  cardTitle: {\n    color: 'black',\n    fontSize: \"18px\",\n    letterSpacing: '2px',\n    textTransform: 'uppercase',\n    fontWeight: 200,\n    fontFamily: \"helvetica\"\n  },\n  searchContainer: {\n    display: \"flex\",\n    backgroundColor: fade(theme.palette.common.white, 0.05),\n    borderRadius: \"20px\",\n    paddingLeft: \"20px\",\n    paddingRight: \"20px\",\n    marginTop: \"5px\",\n    marginBottom: \"5px\"\n  },\n  searchText: {\n    color: 'white'\n  },\n  searchIcon: {\n    alignSelf: \"flex-end\",\n    marginBottom: \"5px\"\n  },\n  searchInput: {\n    width: \"200px\",\n    margin: \"5px\",\n    color: \"red\"\n  }\n}));\n\nconst Recipe = props => {\n  const classes = useStyles();\n  const {\n    history\n  } = props;\n  const [recipeData, setRecipeData] = useState(mockData);\n  const [filter, setFilter] = useState(\"\");\n  useEffect(() => {\n    axios.get(`./Mock`).then(function (response) {\n      const {\n        data\n      } = response;\n      const {\n        results\n      } = data;\n      const newRecipeData = {};\n      results.forEach((recipe, index) => {\n        newRecipeData[index + 1] = {\n          id: index + 1,\n          name: recipe.name\n        };\n      });\n      setRecipeData(newRecipeData);\n    });\n  }, []);\n\n  const handleSearchChange = e => {\n    setFilter(e.target.value);\n  };\n\n  const getRecipeCard = recipeId => {\n    const {\n      id,\n      name,\n      image\n    } = recipeData[recipeId];\n    return /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      key: recipeId,\n      className: classes.cardHover,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      onClick: () => history.push(`/${id}`),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CardMedia, {\n      className: classes.cardMedia,\n      image: image,\n      style: {\n        width: \"100%\",\n        height: \"250px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(CardContent, {\n      className: classes.cardContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      className: classes.cardTitle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }\n    }, \" \", toFirstCharUppercase(name), \" \"))));\n  };\n};\n\nexport default Recipe;","map":{"version":3,"sources":["/Users/cbuckley/react/Recipe App/src/Recipe.js"],"names":["React","useEffect","useState","Grid","Card","CardMedia","CardContent","Typography","CircularProgress","Toolbar","AppBar","TextField","fade","makeStyles","toFirstCharUppercase","axios","mockData","useStyles","theme","recipeContainer","paddingTop","paddingLeft","paddingRight","cardMedia","margin","cardHover","transition","transform","cardContent","textAlign","backgroundColor","cardTitle","color","fontSize","letterSpacing","textTransform","fontWeight","fontFamily","searchContainer","display","palette","common","white","borderRadius","marginTop","marginBottom","searchText","searchIcon","alignSelf","searchInput","width","Recipe","props","classes","history","recipeData","setRecipeData","filter","setFilter","get","then","response","data","results","newRecipeData","forEach","recipe","index","id","name","handleSearchChange","e","target","value","getRecipeCard","recipeId","image","push","height"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAQA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SACEC,IADF,EAEEC,IAFF,EAGEC,SAHF,EAIEC,WAJF,EAKEC,UALF,EAMEC,gBANF,EAOEC,OAPF,EAQEC,MARF,EASEC,SATF,QAUO,mBAVP;AAWA,SAASC,IAAT,EAAeC,UAAf,QAAiC,0BAAjC;AACA,SAASC,oBAAT,QAAqC,aAArC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,MAAMC,SAAS,GAAGJ,UAAU,CAAEK,KAAD,KAAY;AACvCC,EAAAA,eAAe,EAAE;AACfC,IAAAA,UAAU,EAAE,MADG;AAEfC,IAAAA,WAAW,EAAE,MAFE;AAGfC,IAAAA,YAAY,EAAE;AAHC,GADsB;AAMvCC,EAAAA,SAAS,EAAE;AACTC,IAAAA,MAAM,EAAE;AADC,GAN4B;AASvCC,EAAAA,SAAS,EAAE;AACT,eAAW;AACTC,MAAAA,UAAU,EAAE,sBADH;AAETC,MAAAA,SAAS,EAAE;AAFF;AADF,GAT4B;AAevCC,EAAAA,WAAW,EAAE;AACXC,IAAAA,SAAS,EAAE,QADA;AAEXC,IAAAA,eAAe,EAAE;AAFN,GAf0B;AAoBvCC,EAAAA,SAAS,EAAE;AACTC,IAAAA,KAAK,EAAE,OADE;AAETC,IAAAA,QAAQ,EAAE,MAFD;AAGTC,IAAAA,aAAa,EAAE,KAHN;AAITC,IAAAA,aAAa,EAAE,WAJN;AAKTC,IAAAA,UAAU,EAAE,GALH;AAMTC,IAAAA,UAAU,EAAE;AANH,GApB4B;AA4BvCC,EAAAA,eAAe,EAAE;AACfC,IAAAA,OAAO,EAAE,MADM;AAEfT,IAAAA,eAAe,EAAElB,IAAI,CAACM,KAAK,CAACsB,OAAN,CAAcC,MAAd,CAAqBC,KAAtB,EAA6B,IAA7B,CAFN;AAGfC,IAAAA,YAAY,EAAE,MAHC;AAIftB,IAAAA,WAAW,EAAE,MAJE;AAKfC,IAAAA,YAAY,EAAE,MALC;AAMfsB,IAAAA,SAAS,EAAE,KANI;AAOfC,IAAAA,YAAY,EAAE;AAPC,GA5BsB;AAqCvCC,EAAAA,UAAU,EAAE;AACVd,IAAAA,KAAK,EAAE;AADG,GArC2B;AAwCvCe,EAAAA,UAAU,EAAE;AACVC,IAAAA,SAAS,EAAE,UADD;AAEVH,IAAAA,YAAY,EAAE;AAFJ,GAxC2B;AA4CvCI,EAAAA,WAAW,EAAE;AACXC,IAAAA,KAAK,EAAE,OADI;AAEX1B,IAAAA,MAAM,EAAE,KAFG;AAGXQ,IAAAA,KAAK,EAAE;AAHI;AA5C0B,CAAZ,CAAD,CAA5B;;AAmDA,MAAMmB,MAAM,GAAIC,KAAD,IAAW;AACxB,QAAMC,OAAO,GAAGpC,SAAS,EAAzB;AACA,QAAM;AAAEqC,IAAAA;AAAF,MAAcF,KAApB;AACA,QAAM,CAACG,UAAD,EAAaC,aAAb,IAA8BtD,QAAQ,CAACc,QAAD,CAA5C;AACA,QAAM,CAACyC,MAAD,EAASC,SAAT,IAAsBxD,QAAQ,CAAC,EAAD,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,KAAK,CACF4C,GADH,CACQ,QADR,EAEGC,IAFH,CAEQ,UAAUC,QAAV,EAAoB;AACxB,YAAM;AAAEC,QAAAA;AAAF,UAAWD,QAAjB;AACA,YAAM;AAAEE,QAAAA;AAAF,UAAcD,IAApB;AACA,YAAME,aAAa,GAAG,EAAtB;AACAD,MAAAA,OAAO,CAACE,OAAR,CAAgB,CAACC,MAAD,EAASC,KAAT,KAAmB;AACjCH,QAAAA,aAAa,CAACG,KAAK,GAAG,CAAT,CAAb,GAA2B;AACzBC,UAAAA,EAAE,EAAED,KAAK,GAAG,CADa;AAEzBE,UAAAA,IAAI,EAAEH,MAAM,CAACG;AAFY,SAA3B;AAID,OALD;AAMAb,MAAAA,aAAa,CAACQ,aAAD,CAAb;AACD,KAbH;AAcD,GAfQ,EAeN,EAfM,CAAT;;AAiBA,QAAMM,kBAAkB,GAAIC,CAAD,IAAO;AAChCb,IAAAA,SAAS,CAACa,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT;AACD,GAFD;;AAIA,QAAMC,aAAa,GAAIC,QAAD,IAAc;AAClC,UAAM;AAAEP,MAAAA,EAAF;AAAMC,MAAAA,IAAN;AAAYO,MAAAA;AAAZ,QAAsBrB,UAAU,CAACoB,QAAD,CAAtC;AACA,wBACE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAkB,MAAA,GAAG,EAAEA,QAAvB;AAAiC,MAAA,SAAS,EAAEtB,OAAO,CAAC5B,SAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAM,MAAA,OAAO,EAAE,MAAM6B,OAAO,CAACuB,IAAR,CAAc,IAAGT,EAAG,EAApB,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AACE,MAAA,SAAS,EAAEf,OAAO,CAAC9B,SADrB;AAEE,MAAA,KAAK,EAAEqD,KAFT;AAGE,MAAA,KAAK,EAAE;AAAE1B,QAAAA,KAAK,EAAE,MAAT;AAAiB4B,QAAAA,MAAM,EAAE;AAAzB,OAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAME,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAEzB,OAAO,CAACzB,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAEyB,OAAO,CAACtB,SAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAA4CjB,oBAAoB,CAACuD,IAAD,CAAhE,MADF,CANF,CADF,CADF;AAcD,GAhBD;AAkBD,CA7CD;;AA8CA,eAAelB,MAAf","sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import { Typography, Link, CircularProgress, Button } from \"@material-ui/core\";\n// import { toFirstCharUppercase } from \"./constants\";\n// import axios from \"axios\";\n// import mockData from './mockData';\n\n\n\n// const Recipe = (props) => {\n//   const { match, history } = props;\n//   const { params } = match;\n//   const { recipeID } = params;\n//   const [recipe, setRecipe] = useState(mockData);\n\n//   useEffect(() => {\n//     axios\n//       .get(`./Mock`)\n//       .then(function (response) {\n//         const { data } = response;\n//         setRecipe(data);\n//       })\n//       .catch(function (error) {\n//         setRecipe(false);\n//       });\n//   }, [recipeID]);\n\n\n//   const generateRecipeJSX = (recipe) => {\n//     const { name, id, ingredients, weight, } = recipe;\n//     const fullImageUrl = `https://graphics8.nytimes.com/images/2009/09/11/dining/10mini600.1.jpg`;\n//     return (\n//       <>\n//         <Typography variant=\"h3\">\n//            {toFirstCharUppercase(name)}\n//         </Typography>\n//         <img style={{ width: \"300px\", height: \"300px\" }} src={fullImageUrl} alt={fullImageUrl} />\n//         <Typography>Ingredients: {ingredients} </Typography>\n//         <Typography>Directions: {weight} </Typography>\n//       </>\n//     );\n//   };\n//   return (\n//     <>\n//       {recipe === undefined && <CircularProgress />}\n//       {recipe !== undefined && recipe && generateRecipeJSX(recipe)}\n//       {recipe === false && <Typography> Recipe not found</Typography>}\n//       {recipe !== undefined && (\n//         <Button variant=\"contained\" onClick={() => history.push(\"/\")}>\n//           Back\n//         </Button>\n//       )}\n//     </>\n//   );\n// };\n\n\n// export default Recipe;\n\n\n\n\n\n\n\nimport React, { useEffect, useState } from \"react\";\nimport {\n  Grid,\n  Card,\n  CardMedia,\n  CardContent,\n  Typography,\n  CircularProgress,\n  Toolbar,\n  AppBar,\n  TextField,\n} from \"@material-ui/core\";\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\nimport { toFirstCharUppercase } from \"./constants\";\nimport axios from \"axios\";\nimport mockData from './mockData';\n\nconst useStyles = makeStyles((theme) => ({\n  recipeContainer: {\n    paddingTop: \"20px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n  cardMedia: {\n    margin: \"auto\",\n  },\n  cardHover: {\n    '&:hover': {\n      transition: 'all .25s ease-in-out',\n      transform: 'scale(1.05)',\n    },\n  },\n  cardContent: {\n    textAlign: \"center\",\n    backgroundColor: \"lightgrey\",\n    \n  },\n  cardTitle: {\n    color: 'black',\n    fontSize: \"18px\",\n    letterSpacing: '2px',\n    textTransform: 'uppercase',\n    fontWeight: 200,\n    fontFamily: \"helvetica\",\n  },\n  searchContainer: {\n    display: \"flex\",\n    backgroundColor: fade(theme.palette.common.white, 0.05),\n    borderRadius: \"20px\",\n    paddingLeft: \"20px\",\n    paddingRight: \"20px\",\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n  },\n  searchText: {\n    color: 'white',\n  },\n  searchIcon: {\n    alignSelf: \"flex-end\",\n    marginBottom: \"5px\",\n  },\n  searchInput: {\n    width: \"200px\",\n    margin: \"5px\",\n    color: \"red\",\n  },\n}));\n\nconst Recipe = (props) => {\n  const classes = useStyles();\n  const { history } = props;\n  const [recipeData, setRecipeData] = useState(mockData);\n  const [filter, setFilter] = useState(\"\");\n\n  useEffect(() => {\n    axios\n      .get(`./Mock`)\n      .then(function (response) {\n        const { data } = response;\n        const { results } = data;\n        const newRecipeData = {};\n        results.forEach((recipe, index) => {\n          newRecipeData[index + 1] = {\n            id: index + 1,\n            name: recipe.name,\n          };\n        });\n        setRecipeData(newRecipeData);\n      });\n  }, []);\n\n  const handleSearchChange = (e) => {\n    setFilter(e.target.value);\n  };\n\n  const getRecipeCard = (recipeId) => {\n    const { id, name, image } = recipeData[recipeId];\n    return (\n      <Grid item xs={4} key={recipeId} className={classes.cardHover}>\n        <Card onClick={() => history.push(`/${id}`)} >\n          <CardMedia\n            className={classes.cardMedia}\n            image={image}\n            style={{ width: \"100%\", height: \"250px\" }}\n          />\n          <CardContent className={classes.cardContent}>\n            <Typography className={classes.cardTitle}> {toFirstCharUppercase(name)} </Typography>\n          </CardContent>\n        </Card>\n      </Grid>\n    );\n  };\n\n};\nexport default Recipe;"]},"metadata":{},"sourceType":"module"}
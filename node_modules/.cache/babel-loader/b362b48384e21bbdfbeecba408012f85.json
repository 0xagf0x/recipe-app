{"ast":null,"code":"var _jsxFileName = \"/Users/cbuckley/react/Recipe App/src/GridView.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Grid, Card, CardMedia, CardContent, Typography, CircularProgress, Toolbar, AppBar, TextField } from \"@material-ui/core\";\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\nimport { toFirstCharUppercase } from \"./constants\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport axios from \"axios\";\nimport mockData from './mockData';\nconst useStyles = makeStyles(theme => ({\n  navBar: {\n    backgroundColor: 'lightgrey'\n  },\n  recipeContainer: {\n    paddingTop: \"20px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\"\n  },\n  cardMedia: {\n    margin: \"auto\"\n  },\n  cardHover: {\n    '&:hover': {\n      transition: 'all .25s ease-in-out',\n      transform: 'scale(1.05)'\n    }\n  },\n  cardContent: {\n    textAlign: \"center\",\n    backgroundColor: \"lightgrey\"\n  },\n  cardTitle: {\n    color: 'black',\n    fontSize: \"18px\",\n    letterSpacing: '2px',\n    textTransform: 'uppercase',\n    fontWeight: 200,\n    fontFamily: \"helvetica\"\n  },\n  navContainer: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  newRecipeBtn: {\n    height: '25px',\n    margin: '0'\n  },\n  searchContainer: {\n    display: \"flex\",\n    padding: \"5px\",\n    marginTop: \"5px\",\n    marginBottom: \"5px\"\n  },\n  searchText: {\n    color: 'white'\n  },\n  searchIcon: {\n    alignSelf: \"flex-end\",\n    marginBottom: \"5px\",\n    color: 'black'\n  },\n  searchInput: {\n    width: \"200px\",\n    margin: \"5px\"\n  }\n}));\n\nconst GridView = props => {\n  const classes = useStyles();\n  const {\n    history\n  } = props;\n  const [recipeData, setRecipeData] = useState(mockData);\n  const [filter, setFilter] = useState(\"\");\n  useEffect(() => {\n    axios.get(`./Mock`).then(function (response) {\n      const {\n        data\n      } = response;\n      const {\n        results\n      } = data;\n      const newRecipeData = {};\n      results.forEach((recipe, index) => {\n        newRecipeData[index + 1] = {\n          id: index + 1,\n          name: recipe.name\n        };\n      });\n      setRecipeData(newRecipeData);\n    });\n  }, []);\n\n  const handleSearchChange = e => {\n    setFilter(e.target.value);\n  };\n\n  const getRecipeCard = recipeId => {\n    const {\n      id,\n      name,\n      image\n    } = recipeData[recipeId];\n    return /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      key: recipeId,\n      className: classes.cardHover,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      onClick: () => history.push(`/${id}`),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CardMedia, {\n      className: classes.cardMedia,\n      image: image,\n      style: {\n        width: \"100%\",\n        height: \"250px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(CardContent, {\n      className: classes.cardContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      className: classes.cardTitle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, \" \", toFirstCharUppercase(name), \" \"))));\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AppBar, {\n    position: \"static\",\n    className: classes.navBar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Toolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.navContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.searchContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(SearchIcon, {\n    className: classes.searchIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    className: classes.searchInput,\n    onChange: handleSearchChange,\n    label: \"Recipes\",\n    variant: \"standard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    className: classes.newRecipeBtn,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 15\n    }\n  }, \"Add Recipe\")))), recipeData ? /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    className: classes.recipeContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }, Object.keys(recipeData).map(recipeId => recipeData[recipeId].name.includes(filter) && getRecipeCard(recipeId))) : /*#__PURE__*/React.createElement(CircularProgress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default GridView;","map":{"version":3,"sources":["/Users/cbuckley/react/Recipe App/src/GridView.js"],"names":["React","useEffect","useState","Button","Grid","Card","CardMedia","CardContent","Typography","CircularProgress","Toolbar","AppBar","TextField","fade","makeStyles","toFirstCharUppercase","SearchIcon","axios","mockData","useStyles","theme","navBar","backgroundColor","recipeContainer","paddingTop","paddingLeft","paddingRight","cardMedia","margin","cardHover","transition","transform","cardContent","textAlign","cardTitle","color","fontSize","letterSpacing","textTransform","fontWeight","fontFamily","navContainer","width","display","justifyContent","newRecipeBtn","height","searchContainer","padding","marginTop","marginBottom","searchText","searchIcon","alignSelf","searchInput","GridView","props","classes","history","recipeData","setRecipeData","filter","setFilter","get","then","response","data","results","newRecipeData","forEach","recipe","index","id","name","handleSearchChange","e","target","value","getRecipeCard","recipeId","image","push","Object","keys","map","includes"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  Button,\n  Grid,\n  Card,\n  CardMedia,\n  CardContent,\n  Typography,\n  CircularProgress,\n  Toolbar,\n  AppBar,\n  TextField,\n} from \"@material-ui/core\";\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\nimport { toFirstCharUppercase } from \"./constants\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport axios from \"axios\";\nimport mockData from './mockData';\n\nconst useStyles = makeStyles((theme) => ({\n  navBar: {\n    backgroundColor: 'lightgrey',\n  },\n  recipeContainer: {\n    paddingTop: \"20px\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n  },\n  cardMedia: {\n    margin: \"auto\",\n  },\n  cardHover: {\n    '&:hover': {\n      transition: 'all .25s ease-in-out',\n      transform: 'scale(1.05)',\n    },\n  },\n  cardContent: {\n    textAlign: \"center\",\n    backgroundColor: \"lightgrey\",\n    \n  },\n  cardTitle: {\n    color: 'black',\n    fontSize: \"18px\",\n    letterSpacing: '2px',\n    textTransform: 'uppercase',\n    fontWeight: 200,\n    fontFamily: \"helvetica\",\n  },\n  navContainer: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'space-between',\n  },\n  newRecipeBtn: {\n    height: '25px',\n    margin: '0',\n  },\n  searchContainer: {\n    display: \"flex\",\n    padding: \"5px\",\n    marginTop: \"5px\",\n    marginBottom: \"5px\",\n  },\n  searchText: {\n    color: 'white',\n  },\n  searchIcon: {\n    alignSelf: \"flex-end\",\n    marginBottom: \"5px\",\n    color: 'black',\n  },\n  searchInput: {\n    width: \"200px\",\n    margin: \"5px\",\n  },\n}));\n\nconst GridView = (props) => {\n  const classes = useStyles();\n  const { history } = props;\n  const [recipeData, setRecipeData] = useState(mockData);\n  const [filter, setFilter] = useState(\"\");\n\n  useEffect(() => {\n    axios\n      .get(`./Mock`)\n      .then(function (response) {\n        const { data } = response;\n        const { results } = data;\n        const newRecipeData = {};\n        results.forEach((recipe, index) => {\n          newRecipeData[index + 1] = {\n            id: index + 1,\n            name: recipe.name,\n          };\n        });\n        setRecipeData(newRecipeData);\n      });\n  }, []);\n\n  const handleSearchChange = (e) => {\n    setFilter(e.target.value);\n  };\n\n  const getRecipeCard = (recipeId) => {\n    const { id, name, image } = recipeData[recipeId];\n    return (\n      <Grid item xs={4} key={recipeId} className={classes.cardHover}>\n        <Card onClick={() => history.push(`/${id}`)} >\n          <CardMedia\n            className={classes.cardMedia}\n            image={image}\n            style={{ width: \"100%\", height: \"250px\" }}\n          />\n          <CardContent className={classes.cardContent}>\n            <Typography className={classes.cardTitle}> {toFirstCharUppercase(name)} </Typography>\n          </CardContent>\n        </Card>\n      </Grid>\n    );\n  };\n\n  return (\n    <>\n      <AppBar position=\"static\" className={classes.navBar}>\n        <Toolbar>\n            <div className={classes.navContainer}>\n              <div className={classes.searchContainer}>\n                <SearchIcon className={classes.searchIcon} />\n                <TextField\n                  className={classes.searchInput}\n                  onChange={handleSearchChange}\n                  label=\"Recipes\"\n                  variant=\"standard\"\n                />\n              </div>\n              <Button \n              variant=\"contained\"\n              className={classes.newRecipeBtn}\n              size=\"small\"\n              >Add Recipe\n              </Button>\n            </div>\n        </Toolbar>\n      </AppBar>\n      {recipeData ? (\n        <Grid container spacing={2} className={classes.recipeContainer}>\n          {Object.keys(recipeData).map(\n            (recipeId) =>\n              recipeData[recipeId].name.includes(filter) &&\n              getRecipeCard(recipeId)\n          )}\n        </Grid>\n      ) : (\n        <CircularProgress />\n      )}\n    </>\n  );\n};\nexport default GridView;"]},"metadata":{},"sourceType":"module"}